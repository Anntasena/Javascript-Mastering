ARCHITECTURE: INITIAL APPROCH

- User Stories
    - Log my running workouts with distance, time, pace and steps/minutes (cedance)
    - Log my cycling workouts with location, distance, time, speed and elevation gain

    Design Classes (User stories)

        - Class workouts (Parents) -
        1. id
        2. distance
        3. duration
        4. coords
        5. date
        Consturctor()

        ------- Class Runinng (Child) 
                1. name
                2. cedance
                3. pace
                Consturctor()

        ------- Class Cycling (Child) 
                1. name
                2. elevationGain
                3. speed
                Consturctor()
        

PROJECT ARCHITECTURE MENURUT CHAT-GPT

Project Architecture Notes:

1. **Folder Structure**
   - src/: Main source code folder
     - assets/: Static files like images, fonts
     - components/: Reusable UI components
     - services/: Functions or API services
     - utils/: Helper functions
     - pages/: Application pages
     - styles/: CSS or SCSS files
     - index.js: Application entry point
   - public/: Folder for static files like HTML, favicon
   - package.json: Project dependencies and scripts
   - README.md: Project documentation

2. **Separation of Concerns**
   - Separate UI, logic, and data handling into distinct components and services.
   - Use layers: UI Layer, Service Layer, Data Layer.

3. **Service Layer & Dependency Injection**
   - Use a service layer for handling data fetching and processing.
   Example:
   ```js
   export const fetchData = async (url) => {
     const response = await fetch(url);
     const data = await response.json();
     return data;
   };
   ```

4. **Modularization**
   - Use ES6 modules to separate code into smaller, reusable modules.
   Example:
   ```js
   export const add = (a, b) => a + b;
   ```

5. **Package Management**
   - Use npm or yarn for managing project dependencies.

6. **Testing**
   - Jest: For unit testing.
   - Cypress: For end-to-end testing.
   Example:
   ```js
   test('adds 1 + 2 to equal 3', () => {
     expect(add(1, 2)).toBe(3);
   });
   ```

7. **Build Tools**
   - Webpack: Bundle and optimize assets.
   - Babel: Transpile modern JavaScript for older browsers.
   - ESLint: Ensure code consistency.

8. **Version Control with Git**
   - Use branches like `main` and `development`.
   Example:
   ```bash
   git init
   git branch feature/login
   git checkout feature/login
   ```

9. **Documentation**
   - Include a README.md for project instructions.

10. **Environment Configuration**
   - Use .env files to manage environment variables like API URLs.

   Example:
   ```bash
   # .env
   REACT_APP_API_URL=https://api.example.com